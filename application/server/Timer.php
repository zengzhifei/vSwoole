<?php
// +----------------------------------------------------------------------+
// | VSwoole FrameWork                                                    |
// +----------------------------------------------------------------------+
// | Not Decline To Shoulder a Responsibility                             |
// +----------------------------------------------------------------------+
// | zengzhifei@outlook.com                                               |
// +----------------------------------------------------------------------+

namespace vSwoole\application\server;


use vSwoole\application\server\logic\TimerLogic;
use vSwoole\library\common\Command;
use vSwoole\library\common\Config;
use vSwoole\library\common\Inotify;
use vSwoole\library\common\Process;
use vSwoole\library\common\Task;
use vSwoole\library\server\TimerServer;

class Timer extends TimerServer
{
    /**
     * 启动服务器
     * @param array $connectOptions
     * @param array $configOptions
     * @throws \ReflectionException
     */
    public function __construct(array $connectOptions = [], array $configOptions = [])
    {
        parent::__construct($connectOptions, $configOptions);
    }

    /**
     * 管理进程启动回调函数
     * @param \swoole_server $server
     */
    public function onManagerStart(\swoole_server $server)
    {
        parent::onManagerStart($server); // TODO: Change the autogenerated stub

        //DEBUG模式下，监听文件变化自动重启
        if (Config::loadConfig('config', true)->get('is_debug')) {
            $process = new Process();
            $process->add(function () use ($server) {
                Inotify::getInstance()->watch([VSWOOLE_CONFIG_PATH, VSWOOLE_APP_SERVER_PATH . 'logic/WebSocketLogic.php'], function () use ($server) {
                    Command::getInstance($server)->reload();
                });
            });
        }
    }

    /**
     * 工作进程启动回调函数
     * @param \swoole_server $server
     * @param int $worker_id
     */
    public function onWorkerStart(\swoole_server $server, int $worker_id)
    {
        parent::onWorkerStart($server, $worker_id); // TODO: Change the autogenerated stub

        //引入定时器逻辑类
        $this->logic = new TimerLogic($server);
    }

    /**
     * 接收客户端数据回调函数
     * @param \swoole_server $server
     * @param int $fd
     * @param int $reactor_id
     * @param string $data
     */
    public function onReceive(\swoole_server $server, int $fd, int $reactor_id, string $data)
    {
        parent::onReceive($server, $fd, $reactor_id, $data); // TODO: Change the autogenerated stub

        //根据指令接口投递异步任务
        $data = json_decode($data, true);
        if (is_array($data) && isset($data['cmd'])) {
            $client_info = $server->getClientInfo($fd);
            $admin_port = Config::loadConfig('timer')->get('timer_server_connect.adminPort');
            //管理客户端指令接口
            if ($client_info && $admin_port == $client_info['server_port']) {
                switch (strtolower($data['cmd'])) {
                    case 'add':
                        $this->logic->add($data['data']);
                        break;
                    case 'start':
                        $this->logic->start($data['data']);
                        break;
                    case 'stop':
                        $this->logic->stop($data['data']);
                        break;
                    case 'delete':
                        $this->logic->delete($data['data']);
                        break;
                }
            }
        }
    }

    /**
     * 异步任务执行回调函数
     * @param \swoole_server $server
     * @param int $task_id
     * @param int $src_worker_id
     * @param $data
     */
    public function onTask(\swoole_server $server, int $task_id, int $src_worker_id, $data)
    {
        parent::onTask($server, $task_id, $src_worker_id, $data); // TODO: Change the autogenerated stub

        //执行异步任务处理
        Task::execute($server, $data);
    }

    /**
     * 异步任务执行完成回调函数
     * @param \swoole_server $server
     * @param int $task_id
     * @param $data
     */
    public function onFinish(\swoole_server $server, int $task_id, $data)
    {
        parent::onFinish($server, $task_id, $data); // TODO: Change the autogenerated stub

        //执行异步任务完成回调
        Task::finish($data);
    }
}