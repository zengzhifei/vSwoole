<?php
// +----------------------------------------------------------------------+
// | VSwoole FrameWork                                                    |
// +----------------------------------------------------------------------+
// | Not Decline To Shoulder a Responsibility                             |
// +----------------------------------------------------------------------+
// | zengzhifei@outlook.com                                               |                  
// +----------------------------------------------------------------------+

namespace vSwoole\application\server;


use vSwoole\library\common\Config;
use vSwoole\library\common\Exception;
use vSwoole\library\common\Redis;
use vSwoole\library\common\Utils;
use vSwoole\library\server\WebSocketServer;

class WebSocket extends WebSocketServer
{
    /**
     * 启动服务器
     * @param array $connectOptions
     * @param array $configOptions
     */
    public function __construct(array $connectOptions = [], array $configOptions = [])
    {
        parent::__construct($connectOptions, $configOptions);
    }

    /**
     * 主进程启动回调函数
     * @param \swoole_websocket_server $server
     */
    public function onStart(\swoole_websocket_server $server)
    {
        parent::onStart($server); // TODO: Change the autogenerated stub

        //异步写入服务器IP到缓存
        try {
            Redis::getInstance(Config::loadConfig('redis')->get('redis_master'), false, function ($redis, $get_redis_key) {
                $ipKey = Config::loadConfig('redis')->get('redis_key.WebSocket.Server_Ip');
                $redis->sAdd($get_redis_key($ipKey), Utils::getServerIp(), function ($redis, $result) {
                    try {
                        if (false === $result) {
                            throw new \Exception($redis->errMsg, $redis->errCode);
                        }
                    } catch (\Exception $e) {
                        Exception::reportException($e);
                    }
                });
            });
        } catch (\Exception $e) {
            Exception::reportException($e);
        }
    }

    /**
     * 客户端连接回调函数
     * @param \swoole_websocket_server $server
     * @param \swoole_http_request $request
     */
    public function onOpen(\swoole_websocket_server $server, \swoole_http_request $request)
    {
        parent::onOpen($server, $request); // TODO: Change the autogenerated stub

        //异步写入客户端信息到缓存
        try {
            Redis::getInstance(Config::loadConfig('redis')->get('redis_master'), false, function ($redis, $get_redis_key) use ($server, $request) {
                $linkKey = Config::loadConfig('redis')->get('redis_key.WebSocket.Link_Info');
                $server_ip = Utils::getServerIp();
                $ip = str_replace('.', '', $server_ip);
                $link_key = $get_redis_key($linkKey . '_' . $ip);
                $clientInfo = [
                    'client_ip'    => isset($request->header['x-real-ip']) ? $request->header['x-real-ip'] : Utils::getClientIp($server, $request->fd),
                    'server_ip'    => $server_ip,
                    'server_port'  => $request->server['server_port'],
                    'connect_time' => time()
                ];
                $redis->hSet($link_key, $request->fd, json_encode($clientInfo), function ($redis, $result) {
                    try {
                        if (false === $result) {
                            throw new \Exception($redis->errMsg, $redis->errCode);
                        }
                    } catch (\Exception $e) {
                        Exception::reportException($e);
                    }
                });
            });
        } catch (\Exception $e) {
            Exception::reportException($e);
        }
    }

    /**
     * 接收客户端数据回调函数
     * @param \swoole_websocket_server $server
     * @param \swoole_websocket_frame $frame
     */
    public function onMessage(\swoole_websocket_server $server, \swoole_websocket_frame $frame)
    {
        parent::onMessage($server, $frame); // TODO: Change the autogenerated stub

        //根据指令接口投递异步任务
        if ($frame->finish) {
            $data = json_decode($frame->data, true);
            if (is_array($data) && isset($data['cmd'])) {
                $client_info = $server->getClientInfo($frame->fd);
                $admin_port = Config::loadConfig('websocket')->get('ws_server_connect.adminPort');
                //管理客户端指令接口
                if ($client_info && $admin_port == $client_info['server_port']) {
                    switch (strtolower($data['cmd'])) {
                        case 'ping':
                            break;
                        case 'online':
                            $server->task(['method' => 'line', 'arguments' => [$frame]]);
                            break;
                        case 'push':
                            $server->task(['method' => 'push', 'arguments' => [$frame]]);
                            break;
                        case 'test':
                            break;
                    }
                } else {
                    //用户客户端指令接口
                    switch (strtolower($data['cmd'])) {
                        case 'range':
                            $server->task(['method' => 'range', 'arguments' => [$frame]]);
                            break;
                        case 'ping':
                            break;
                        case 'online':
                            $server->task(['method' => 'line', 'arguments' => [$frame]]);
                            break;
                        case 'send':
                            $server->task(['method' => 'send', 'arguments' => [$frame]]);
                            break;
                    }
                }
            }
        }
    }

    /**
     * 异步任务回调函数
     * @param \swoole_server $server
     * @param $task_id
     * @param $src_worker_id
     * @param $data
     */
    public function onTask(\swoole_server $server, int $task_id, int $src_worker_id, $data)
    {
        parent::onTask($server, $task_id, $src_worker_id, $data); // TODO: Change the autogenerated stub

        //执行异步任务
        try {
            if (isset($data['method'])) {
                if (is_string($data['method']) && method_exists($this, $data['method'])) {
                    $object = $this;
                    $method = $data['method'];
                } else if (is_array($data['method']) && isset($data['method'][0]) && isset($data['method'][1]) && method_exists($data['method'][0], $data['method'][1])) {
                    $object = $data['method'][0];
                    $method = $data['method'][1];
                } else {
                    throw new \Exception('Argument is invalid');
                }
                if (is_callable([$object, $method])) {
                    $arguments = isset($data['arguments']) ? $data['arguments'] : [];
                    $finish_data = is_object($object) ? $object->$method(...$arguments) : $object::$method(...$arguments);
                    if (null !== $finish_data) {
                        $server->finish($finish_data);
                    }
                } else {
                    throw new \Exception('Argument method is inaccessible');
                }
            }
        } catch (\Exception $e) {
            Exception::reportException($e);
        }
    }

    /**
     * 异步任务执行完成回调函数
     * @param \swoole_server $server
     * @param int $task_id
     * @param $data
     */
    public function onFinish(\swoole_server $server, int $task_id, $data)
    {
        parent::onFinish($server, $task_id, $data); // TODO: Change the autogenerated stub

        // 执行异步任务完成回调函数
        try {
            if (isset($data['method'])) {
                if (is_string($data['method']) && method_exists($this, $data['method'])) {
                    $object = $this;
                    $method = $data['method'];
                } else if (is_array($data['method']) && isset($data['method'][0]) && isset($data['method'][1]) && method_exists($data['method'][0], $data['method'][1])) {
                    $object = $data['method'][0];
                    $method = $data['method'][1];
                } else {
                    throw new \Exception('Argument is invalid');
                }
                if (is_callable([$object, $method])) {
                    $arguments = isset($data['arguments']) ? $data['arguments'] : [];
                    is_object($object) ? $object->$method(...$arguments) : $object::$method(...$arguments);
                } else {
                    throw new \Exception('Argument method is inaccessible');
                }
            }
        } catch (\Exception $e) {
            Exception::reportException($e);
        }
    }

    /**
     * 客户端断开回调函数
     * @param \swoole_websocket_server $server
     * @param int $fd
     */
    public function onClose(\swoole_websocket_server $server, int $fd)
    {
        parent::onClose($server, $fd); // TODO: Change the autogenerated stub

        //删除客户端信息
        try {
            Redis::getInstance(Config::loadConfig('redis')->get('redis_master'), false, function ($redis, $get_redis_key) use ($fd) {
                $linkKey = Config::loadConfig('redis')->get('redis_key.WebSocket.Link_Info');
                $ip = str_replace('.', '', Utils::getServerIp());
                $link_key = $get_redis_key($linkKey . '_' . $ip);
                $userKey = Config::loadConfig('redis')->get('redis_key.WebSocket.User_Info');
                $user_key = $get_redis_key($userKey);
                $redis->hGet($link_key, $fd, function ($redis, $result) use ($link_key, $user_key, $fd) {
                    if (false !== $result) {
                        $link_info = json_decode($result, true);
                        if ($link_info['server_port'] != Config::loadConfig('websocket')->get('ws_server_connect.adminPort')) {
                            if (isset($link_info['range_id']) && $link_info['range_id']) {
                                $redis->hDel($user_key . '_' . $link_info['range_id'], $link_info['user_id'], function ($redis, $result) {
                                });
                            }
                            $redis->hDel($link_key, $fd, function ($redis, $result) {
                            });
                        }
                    }
                });
            });
        } catch (\Exception $e) {
            Exception::reportException($e);
        }
    }

    /**
     * 用户信息归档
     * @param \swoole_websocket_frame $frame
     */
    private function range(\swoole_websocket_frame $frame)
    {
        try {
            $redis = Redis::getInstance(Config::loadConfig('redis')->get('redis_master'), true);
            $linkKey = Config::loadConfig('redis')->get('redis_key.WebSocket.Link_Info');
            $ip = str_replace('.', '', Utils::getServerIp());
            $link_key = $linkKey . '_' . $ip;
            $userKey = Config::loadConfig('redis')->get('redis_key.WebSocket.User_Info');
            $user_key = $userKey;
            $link_info = $redis->hGet($link_key, $frame->fd);
            if (false !== $link_info) {
                $link_info = json_decode($link_info, true);
                if ($link_info['server_port'] == Config::loadConfig('websocket')->get('ws_server_connect.port')) {
                    $data = json_decode($frame->data, true);
                    if (isset($data['user_id']) && $data['user_id']) {
                        $link_info['user_id'] = $data['user_id'];
                        $link_info['range_id'] = $data['range_id'];
                        $redis->hSet($link_key, $frame->fd, json_encode($link_info));
                        $user_info = [
                            'fd'           => $frame->fd,
                            'user_id'      => $data['user_id'],
                            'range_id'     => $data['range_id'],
                            'client_ip'    => $link_info['client_ip'],
                            'server_ip'    => $link_info['server_ip'],
                            'connect_time' => $link_info['connect_time']
                        ];
                        $user_key = isset($data['range_id']) ? $user_key . '_' . $data['range_id'] : $user_key;
                        $redis->hSet($user_key, $data['user_id'], json_encode($user_info));
                    }
                }
            }
        } catch (\Exception $e) {
            Exception::reportException($e);
        }
    }

    /**
     * 发送在线人数
     * @param \swoole_websocket_frame $frame
     */
    private function line(\swoole_websocket_frame $frame)
    {
        try {
            $redis = Redis::getInstance(Config::loadConfig('redis')->get('redis_master'), true);
            $userKey = Config::loadConfig('redis')->get('redis_key.WebSocket.User_Info');
            $data = json_decode($frame->data, true);
            if (isset($data['range_id']) && $data['range_id']) {
                $user_key = $userKey . '_' . $data['range_id'];
                $online = $redis->hLen($user_key);
                $this->swoole->push($frame->fd, json_encode(['status' => 1, 'data' => $online]));
            }
        } catch (\Exception $e) {
            Exception::reportException($e);
        }
    }

    /**
     * 客户端发送消息
     * @param \swoole_websocket_frame $frame
     */
    private function send(\swoole_websocket_frame $frame)
    {
        try {
            $data = json_decode($frame->data, true);
            if (is_array($data)) {
                $client = new \vSwoole\application\client\WebSocket([], []);
                $client->execute('push', $data);
            }
        } catch (\Exception $e) {
            Exception::reportException($e);
        }
    }

    /**
     * 服务端推送消息
     * @param \swoole_websocket_frame $frame
     * @return array
     */
    private function push(\swoole_websocket_frame $frame)
    {
        try {
            $redis = Redis::getInstance(Config::loadConfig('redis')->get('redis_master'), true);
            $linkKey = Config::loadConfig('redis')->get('redis_key.WebSocket.Link_Info');
            $server_ip = Utils::getServerIp();
            $ip = str_replace('.', '', $server_ip);
            $link_key = $linkKey . '_' . $ip;
            $userKey = Config::loadConfig('redis')->get('redis_key.WebSocket.User_Info');
            $user_key = $userKey;
            $link_info = $redis->hGet($link_key, $frame->fd);
            if (false !== $link_info) {
                $link_info = json_decode($link_info, true);
                if ($link_info['server_port'] == Config::loadConfig('websocket')->get('ws_server_connect.adminPort')) {
                    $data = json_decode($frame->data, true);
                    if (isset($data['range_id']) && $data['range_id']) {
                        //推送指定用户
                        if (isset($data['user_id']) && $data['user_id']) {
                            $user_key = $user_key . '_' . $data['range_id'];
                            $user_info = $redis->hGet($user_key, $data['user_id']);
                            if (false !== $user_info) {
                                $user_info = json_decode($user_info, true);
                                $push_data = json_decode($frame->data, true);
                                if ($user_info['server_ip'] == $server_ip && $this->swoole->exist($user_info['fd'])) {
                                    $res = $this->swoole->push($user_info['fd'], json_encode(['type' => 'message', 'data' => $push_data['message']]));
                                }
                            }
                            //推送所有用户
                        } else {
                            $user_key = $user_key . '_' . $data['range_id'];
                            $user_list = $redis->hVals($user_key);
                            if (false !== $user_list) {
                                $push_data = json_decode($frame->data, true);
                                foreach ($user_list as $user_info) {
                                    $user_info = json_decode($user_info, true);
                                    if (isset($user_info['fd']) && $this->swoole->exist($user_info['fd'])) {
                                        $this->swoole->push($user_info['fd'], json_encode(['type' => 'message', 'data' => $push_data['message']]));
                                    }
                                }
                            }
                        }
                    }
                }
                return ['method' => 'clearClient', 'arguments' => [$frame->fd]];
            }
        } catch (\Exception $e) {
            Exception::reportException($e);
        }
    }

    /**
     * 删除管理客户端信息
     * @param int $fd
     */
    private function clearClient(int $fd)
    {
        //删除管理客户端信息
        try {
            Redis::getInstance(Config::loadConfig('redis')->get('redis_master'), false, function ($redis, $get_redis_key) use ($fd) {
                $linkKey = Config::loadConfig('redis')->get('redis_key.WebSocket.Link_Info');
                $ip = str_replace('.', '', Utils::getServerIp());
                $link_key = $get_redis_key($linkKey . '_' . $ip);
                $redis->hGet($link_key, $fd, function ($redis, $result) use ($link_key, $fd) {
                    if (false !== $result) {
                        $link_info = json_decode($result, true);
                        if ($link_info['server_port'] == Config::loadConfig('websocket')->get('ws_server_connect.adminPort')) {
                            $redis->hDel($link_key, $fd, function ($redis, $result) {
                            });
                        }
                    }
                });
            });
        } catch (\Exception $e) {
            Exception::reportException($e);
        }
    }
}