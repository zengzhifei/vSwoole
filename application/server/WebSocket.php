<?php
// +----------------------------------------------------------------------+
// | VSwoole FrameWork                                                    |
// +----------------------------------------------------------------------+
// | Not Decline To Shoulder a Responsibility                             |
// +----------------------------------------------------------------------+
// | zengzhifei@outlook.com                                               |                  
// +----------------------------------------------------------------------+

namespace application\server;


use library\common\Config;
use library\common\Exception;
use library\common\Redis;
use library\common\Utils;
use library\server\WebSocketServer;

class WebSocket extends WebSocketServer
{
    /**
     * 服务器主进程启动回调函数
     * @param \swoole_websocket_server $server
     */
    public function onStart(\swoole_websocket_server $server)
    {
        //重写服务器主进程启动回调函数
        parent::onStart($server); // TODO: Change the autogenerated stub

        //异步写入服务器IP到缓存
        try {
            $redisConf = Config::loadConfig('redis');
            $redisOptions = $redisConf->get('redis_master');
            $webSocketKeys = $redisConf->get('redis_key.WebSocket');
            $ip = Utils::getServerIp();
            Redis::getInstance($redisOptions, false, function ($redis, $getRedisKey) use ($webSocketKeys, $ip) {
                $redis->sAdd($getRedisKey($webSocketKeys['Server_Ip']), $ip, function ($client, $result) {
                    try {
                        if (false === $result) {
                            throw new \Exception($client->errMsg, $client->errCode);
                        }
                    } catch (\Exception $e) {
                        Exception::reportException($e);
                    }
                });
            });
        } catch (\Exception $e) {
            Exception::reportException($e);
        }
    }

    /**
     * 客户端连接服务器回调函数
     * @param \swoole_websocket_server $server
     * @param \swoole_http_request $request
     */
    public function onOpen(\swoole_websocket_server $server, \swoole_http_request $request)
    {
        //客户端连接服务器回调函数
        parent::onOpen($server, $request); // TODO: Change the autogenerated stub

        //异步写入客户端信息到缓存
        try {
            $wsConfig = Config::loadConfig('websocket');
            $ws_connect_options = $wsConfig->get('ws_connect_options');
            if ($request->server['server_port'] == $ws_connect_options['port']) {
                $redisConf = Config::loadConfig('redis');
                $redisOptions = $redisConf->get('redis_master');
                $webSocketKeys = $redisConf->get('redis_key.WebSocket');
                Redis::getInstance($redisOptions, false, function ($redis, $get_redis_key) use ($webSocketKeys, $request) {
                    $ip = Utils::getServerIp();
                    $ip = str_replace('.', '', $ip);
                    $key = $get_redis_key($webSocketKeys['Link_Info'] . '_' . $ip);
                    $clientInfo = [
                        'client_ip'    => isset($request->header['x-real-ip']) ? $request->header['x-real-ip'] : '',
                        'connect_time' => time()
                    ];
                    $redis->hSet($key, $request->fd, json_encode($clientInfo), function ($redis, $result) {
                        try {
                            if (false === $result) {
                                throw new \Exception($redis->errMsg, $redis->errCode);
                            }
                        } catch (\Exception $e) {
                            Exception::reportException($e);
                        }
                    });
                });
            }
        } catch (\Exception $e) {
            Exception::reportException($e);
        }
    }

    /**
     * 重写服务器接收客户端消息回调函数
     * @param \swoole_websocket_server $server
     * @param \swoole_websocket_frame $frame
     */
    public function onMessage(\swoole_websocket_server $server, \swoole_websocket_frame $frame)
    {
        //重写服务器接收客户端消息回调函数
        parent::onMessage($server, $frame); // TODO: Change the autogenerated stub

        //异步写入用户信息到缓存
        try {
            if ($frame->finish) {
                $data = json_decode($frame->data, true);
                if (is_array($data) && isset($data['cmd'])) {
                    switch (strtolower($data['cmd'])) {
                        case 'range':
                            $redisConf = Config::loadConfig('redis');
                            $redisOptions = $redisConf->get('redis_master');
                            $webSocketKeys = $redisConf->get('redis_key.WebSocket');
                            $range_id = $data['range_id'];
                            Redis::getInstance($redisOptions, false, function ($redis, $get_redis_key) use ($webSocketKeys, $frame) {
                                $ip = Utils::getServerIp();
                                $ip = str_replace('.', '', $ip);
                                $key = $get_redis_key($webSocketKeys['Link_Info'] . '_' . $ip);
                                $redis->hGet($key, $frame->fd, function ($redis, $result) use ($key, $frame) {
                                    if (false !== $result) {
                                        $link_info = json_decode($result, true);
                                        $data = json_decode($frame->data, true);
                                        $link_info['user_id'] = $data['user_id'];
                                        $link_info['range_id'] = $data['range_id'];
                                        $redis->hSet($key, $frame->fd, json_encode($link_info), function ($redis, $result) {
                                            try {
                                                if (false === $result) {
                                                    throw new \Exception($redis->errMsg, $redis->errCode);
                                                }
                                            } catch (\Exception $e) {
                                                Exception::reportException($e);
                                            }
                                        });
                                    }
                                });
                            });
                            break;
                    }
                }
            }
        } catch (\Exception $e) {
            Exception::reportException($e);
        }
    }

}