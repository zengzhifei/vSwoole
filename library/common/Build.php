<?php
// +----------------------------------------------------------------------+
// | VSwoole FrameWork                                                    |
// +----------------------------------------------------------------------+
// | Not Decline To Shoulder a Responsibility                             |
// +----------------------------------------------------------------------+
// | zengzhifei@outlook.com                                               |                  
// +----------------------------------------------------------------------+

namespace vSwoole\library\common;


class Build
{
    /**
     * 服务名称
     * @var string
     */
    protected static $serverName;

    /**
     * 回调事件函数列表
     * @var array
     */
    protected static $callbackEventList = [
        '__construct'    => [
            'annotation' => '启动服务器',
            'parameters' => ['array $connectOptions = []', 'array $configOptions = []'],
            'content'    => 'parent::__construct($connectOptions, $configOptions);// TODO: Change the autogenerated stub'
        ],
        'onStart'        => [
            'annotation' => '主进程启动回调函数',
            'parameters' => ['\swoole_server $server']
        ],
        'onShutdown'     => [
            'annotation' => '主进程结束回调函数',
            'parameters' => ['\swoole_server $server']
        ],
        'onManagerStart' => [
            'annotation' => '管理进程启动回调函数',
            'parameters' => ['\swoole_server $server']
        ],
        'onManagerStop'  => [
            'annotation' => '管理进程结束回调函数',
            'parameters' => ['\swoole_server $server']
        ],
        'onWorkerStart'  => [
            'annotation' => '工作进程启动回调函数',
            'parameters' => ['\swoole_server $server', 'int $worker_id']
        ],
        'onWorkerStop'   => [
            'annotation' => '工作进程结束回调函数',
            'parameters' => ['\swoole_server $server', 'int $worker_id']
        ],
        'onWorkerExit'   => [
            'annotation' => '工作进程退出回调函数',
            'parameters' => ['\swoole_server $server', 'int $worker_id']
        ],
        'onWorkerError'  => [
            'annotation' => '工作进程异常回调函数',
            'parameters' => ['\swoole_server $server', 'int $worker_id']
        ],
        'onConnect'      => [
            'annotation' => '客户端连接回调函数',
            'parameters' => ['\swoole_server $server', 'int $fd', 'int $reactor_id']
        ],
        'onReceive'      => [
            'annotation' => '接收客户端数据回调函数',
            'parameters' => ['\swoole_server $server', 'int $fd', 'int $reactor_id', 'string $data']
        ],
        'onPacket'       => [
            'annotation' => '接收客户端UDP数据回调函数',
            'parameters' => ['\swoole_server $server', 'string $data', 'array $client_info',]
        ],
        'onClose'        => [
            'annotation' => '客户端断开回调函数',
            'parameters' => ['\swoole_server $server', 'int $fd', 'int $reactor_id']
        ],
        'onBufferFull'   => [
            'annotation' => '缓存区达到最高水位时回调函数',
            'parameters' => ['\swoole_server $server', 'int $fd']
        ],
        'onBufferEmpty'  => [
            'annotation' => '缓存区达到最低水位时回调函数',
            'parameters' => ['\swoole_server $server', 'int $fd']
        ],
        'onTask'         => [
            'annotation' => '异步任务执行回调函数',
            'parameters' => ['\swoole_server $server', 'int $task_id', 'int $src_worker_id', '$data']
        ],
        'onFinish'       => [
            'annotation' => '异步任务执行完成回调函数',
            'parameters' => ['\swoole_server $server', 'int $task_id', '$data']
        ],
        'onPipeMessage'  => [
            'annotation' => '工作进程接收管道消息回调函数',
            'parameters' => ['\swoole_server $server', 'int $src_worker_id', '$data']
        ],
        'onHandShake'    => [
            'annotation' => '客户端与WebSocket建立连接后握手回调函数',
            'parameters' => ['\swoole_http_request $request', '\swoole_http_response $response']
        ],
        'onOpen'         => [
            'annotation' => '客户端与WebSocket建立连接成功后回调函数',
            'parameters' => ['\swoole_websocket_server $server', '\swoole_http_request $request']
        ],
        'onMessage'      => [
            'annotation' => 'WebSocket服务端接收客户端消息回调函数',
            'parameters' => ['\swoole_websocket_server $server', '\swoole_websocket_frame $frame']
        ],
        'onRequest'      => [
            'annotation' => '接收Http客户端请求回调函数',
            'parameters' => ['\swoole_http_request $request', '\swoole_http_response $response']
        ]
    ];


    /**
     * 构建服务名称
     * @param string $serverName
     * @return bool
     */
    protected static function buildServerName(string $serverName = 'Demo')
    {
        if ($serverName == '' || file_exists(VSWOOLE_LIB_SERVER_PATH . $serverName . VSWOOLE_CLASS_EXT)) {
            return false;
        } else {
            self::$serverName = $serverName;
            return true;
        }
    }

    /**
     * 构建服务头部内容
     * @return string
     */
    protected static function buildServerHeader()
    {
        $serverName = self::$serverName;
        return <<<EOF
<?php
// +----------------------------------------------------------------------+
// | VSwoole FrameWork                                                    |
// +----------------------------------------------------------------------+
// | Not Decline To Shoulder a Responsibility                             |
// +----------------------------------------------------------------------+
// | zengzhifei@outlook.com                                               |                  
// +----------------------------------------------------------------------+

namespace vSwoole\library\server;


class {$serverName} extends Server 
{
EOF;
    }

    /**
     * 构建服务回调函数内容
     * @return string
     */
    protected static function buildServerCallback()
    {
        $callbackContent = PHP_EOL;

        foreach (self::$callbackEventList as $callbackName => $callback) {
            $annotation = join(PHP_EOL . '     * @param ', $callback['parameters']);
            $parameters = join(', ', $callback['parameters']);
            $content = isset($callback['content']) ? $callback['content'] : '';

            $callbackContent .= <<<EOF
    /**
     * {$callback['annotation']}
     * @param {$annotation}
     */
    public function {$callbackName}({$parameters}) 
    {
        {$content}
    }


EOF;
        }

        return $callbackContent;
    }

    /**
     * 构建服务尾部内容
     * @return string
     */
    protected static function buildServerFooter()
    {
        return <<<EOF
}
EOF;
    }

    /**
     * 获取服务文件名称
     * @return string
     */
    protected static function getServerFileName()
    {
        return VSWOOLE_LIB_SERVER_PATH . self::$serverName . VSWOOLE_CLASS_EXT;
    }

    /**
     * 构建服务文件
     * @param string $serverName
     * @return bool
     */
    public static function build(string $serverName)
    {
        if (self::buildServerName($serverName)) {
            $serverContent = self::buildServerHeader() . self::buildServerCallback() . self::buildServerFooter();
            $build_res = @file_put_contents(self::getServerFileName(), $serverContent);
            return true;
        }

        return isset($build_res) ? $build_res : false;
    }

}