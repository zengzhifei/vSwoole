<?php
// +----------------------------------------------------------------------+
// | VSwoole FrameWork                                                    |
// +----------------------------------------------------------------------+
// | Not Decline To Shoulder a Responsibility                             |
// +----------------------------------------------------------------------+
// | zengzhifei@outlook.com                                               |                  
// +----------------------------------------------------------------------+

namespace vSwoole\library\server;


class Demo extends Server 
{
    /**
     * 启动服务器
     * @param array $connectOptions = []
     * @param array $configOptions = []
     */
    public function __construct(array $connectOptions = [], array $configOptions = []) 
    {
        parent::__construct($connectOptions, $configOptions);// TODO: Change the autogenerated stub
    }

    /**
     * 主进程启动回调函数
     * @param \swoole_server $server
     */
    public function onStart(\swoole_server $server) 
    {
        
    }

    /**
     * 主进程结束回调函数
     * @param \swoole_server $server
     */
    public function onShutdown(\swoole_server $server) 
    {
        
    }

    /**
     * 管理进程启动回调函数
     * @param \swoole_server $server
     */
    public function ManagerStart(\swoole_server $server) 
    {
        
    }

    /**
     * 管理进程结束回调函数
     * @param \swoole_server $server
     */
    public function ManagerStop(\swoole_server $server) 
    {
        
    }

    /**
     * 工作进程启动回调函数
     * @param \swoole_server $server
     * @param int $worker_id
     */
    public function WorkerStart(\swoole_server $server, int $worker_id) 
    {
        
    }

    /**
     * 工作进程结束回调函数
     * @param \swoole_server $server
     * @param int $worker_id
     */
    public function WorkerStop(\swoole_server $server, int $worker_id) 
    {
        
    }

    /**
     * 工作进程退出回调函数
     * @param \swoole_server $server
     * @param int $worker_id
     */
    public function WorkerExit(\swoole_server $server, int $worker_id) 
    {
        
    }

    /**
     * 工作进程异常回调函数
     * @param \swoole_server $server
     * @param int $worker_id
     */
    public function WorkerError(\swoole_server $server, int $worker_id) 
    {
        
    }

    /**
     * 客户端连接回调函数
     * @param \swoole_server $server
     * @param int $fd
     * @param int $reactor_id
     */
    public function Connect(\swoole_server $server, int $fd, int $reactor_id) 
    {
        
    }

    /**
     * 接收客户端数据回调函数
     * @param \swoole_server $server
     * @param int $fd
     * @param int $reactor_id
     * @param string $data
     */
    public function Receive(\swoole_server $server, int $fd, int $reactor_id, string $data) 
    {
        
    }

    /**
     * 接收客户端UDP数据回调函数
     * @param \swoole_server $server
     * @param string $data
     * @param array $client_info
     */
    public function Packet(\swoole_server $server, string $data, array $client_info) 
    {
        
    }

    /**
     * 客户端断开回调函数
     * @param \swoole_server $server
     * @param int $fd
     * @param int $reactor_id
     */
    public function Close(\swoole_server $server, int $fd, int $reactor_id) 
    {
        
    }

    /**
     * 缓存区达到最高水位时回调函数
     * @param \swoole_server $server
     * @param int $fd
     */
    public function BufferFull(\swoole_server $server, int $fd) 
    {
        
    }

    /**
     * 缓存区达到最低水位时回调函数
     * @param \swoole_server $server
     * @param int $fd
     */
    public function BufferEmpty(\swoole_server $server, int $fd) 
    {
        
    }

    /**
     * 异步任务执行回调函数
     * @param \swoole_server $server
     * @param int $task_id
     * @param int $src_worker_id
     * @param mixed $data
     */
    public function Task(\swoole_server $server, int $task_id, int $src_worker_id, mixed $data) 
    {
        
    }

    /**
     * 异步任务执行完成回调函数
     * @param \swoole_server $server
     * @param int $task_id
     * @param mixed $data
     */
    public function Finish(\swoole_server $server, int $task_id, mixed $data) 
    {
        
    }

    /**
     * 工作进程接收管道消息回调函数
     * @param \swoole_server $server
     * @param int $src_worker_id
     * @param mixed $data
     */
    public function PipeMessage(\swoole_server $server, int $src_worker_id, mixed $data) 
    {
        
    }

    /**
     * 定时器触发回调函数
     * @param \swoole_server $server
     * @param int $interval
     */
    public function Timer(\swoole_server $server, int $interval) 
    {
        
    }

    /**
     * 客户端与WebSocket建立连接后握手回调函数
     * @param \swoole_http_request $request
     * @param \swoole_http_response $response
     */
    public function HandShake(\swoole_http_request $request, \swoole_http_response $response) 
    {
        
    }

    /**
     * 客户端与WebSocket建立连接成功后回调函数
     * @param \swoole_websocket_server $server
     * @param \swoole_http_request $request
     */
    public function Open(\swoole_websocket_server $server, \swoole_http_request $request) 
    {
        
    }

    /**
     * WebSocket服务端接收客户端消息回调函数
     * @param \swoole_websocket_server $server
     * @param \swoole_websocket_frame $frame
     */
    public function Message(\swoole_websocket_server $server, \swoole_websocket_frame $frame) 
    {
        
    }

    /**
     * 接收Http客户端请求回调函数
     * @param \swoole_http_request $request
     * @param \swoole_http_response $response
     */
    public function Request(\swoole_http_request $request, \swoole_http_response $response) 
    {
        
    }

}